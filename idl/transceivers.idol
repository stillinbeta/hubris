// Transceivers API

Interface(
    name: "Transceivers",
    ops: {

        "get_presence": (
            doc: "Get the Presence of each module.",
            reply: Result(
                ok: "u32",
                err: CLike("TransceiversError"),
            ),
        ),

        "get_power_good": (
            doc: "Get the Power Good of the hot-swap controller of each module.",
            reply: Result(
                ok: "u32",
                err: CLike("TransceiversError"),
            ),
        ),

        "get_power_good_timeout": (
            doc: "Get the Power Good timeout of the hot-swap controller of each module.",
            reply: Result(
                ok: "u32",
                err: CLike("TransceiversError"),
            ),
        ),

        "get_irq_rxlos": (
            doc: "Get the Interrupt/RxLOS of each module.",
            reply: Result(
                ok: "u32",
                err: CLike("TransceiversError"),
            ),
        ),

        "get_modules_status": (
            doc: "Collect the status of each modules control and status signals",
            reply: Result(
                ok: "ModulesStatus",
                err: CLike("TransceiversError"),
            ),
        ),

        "set_power_enable": (
            doc: "Enable power for modules whose bit is set in port_bcast_mask.",
            args: {
                "port_bcast_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "clear_power_enable": (
            doc: "Disable power for modules whose bit is set in port_bcast_mask.",
            args: {
                "port_bcast_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "set_reset": (
            doc: "Enable reset for modules whose bit is set in port_bcast_mask.",
            args: {
                "port_bcast_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "clear_reset": (
            doc: "Disable reset for modules whose bit is set in port_bcast_mask.",
            args: {
                "port_bcast_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "setup_i2c_read": (
            doc: "Setup a read operation over I2C to all modules whose bit is set in the port_bcast_mask",
            args: {
                "reg": "u8",
                "num_bytes": "u8",
                "port_bcast_mask": "u32",
            },
            reply: Result(
                ok: "()",
                err: CLike("TransceiversError"),
            ),
        ),

        "get_i2c_read_buffer": (
            doc: "Get values from the I2C read buffer for a given port number (0 to 31)",
            args: {
                "port": "u8",
                "num_bytes": "u8",
            },
            reply: Result(
                ok: "[u8; 128]",
                err: CLike("TransceiversError"),
            ),
        ),
    }
)